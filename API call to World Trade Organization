{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# **Sheep Imports by Country in 1998**\n",
        "## The Process\n",
        "This project uses Python to scrape data from the World Trade Organization site, and then compile that data into a usable dataset. Then, the dataset is used to create a bargraph that displays the data in a readable format.\n",
        "I've chosen to gather and display the data for imports of Sheep by each country in 1998. This was a random choice purely to learn how to use the WTO API.\n",
        "## The Purpose\n",
        "The purpose of this project was to practice using the WTO API. It is a moderately tricky API to navigate, as all of the data is stored using intricate numeric codes, and the data is then output as a nested dictionary. However, I was able to gather the data I wanted, then clean, format and display it as a chart.\n",
        "\n",
        "## The Future\n",
        "I hope to use this API knowledge to do further projects with WTO data, including HTML sites with various interesting charts, 2d and 3d network graphs of trade flows, and more intricate visualizations."
      ],
      "metadata": {
        "id": "FnKkNxtbcLSQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "#drive.mount('/content/drive')\n",
        "\n",
        "import os\n",
        "\n",
        "if not os.path.isdir('drive/MyDrive/datasets/API Datasets/wto1'): #if folder 'datasets' doesn't exist\n",
        "  os.makedirs('drive/MyDrive/datasets/API Datasets/wto1') #make folder\n",
        "os.getcwd() #this asks: where am I? Will return filepath (to check)\n",
        "\n",
        "import pandas as pd\n",
        "import requests\n"
      ],
      "metadata": {
        "id": "bYamcNYf-6Bd"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "id": "WzPmsWehiwH5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c88c90f9-eb35-4823-c142-a98ed3a0a8c2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "First, grab your data. We're specifying the data as all countries' Bilateral Imports (based on HS codes) of sheep from the world, in the year 1998. \n"
          ]
        }
      ],
      "source": [
        "\n",
        "########### Python 3.2 #############\n",
        "import http.client, urllib.request, urllib.parse, urllib.error, base64\n",
        "import json\n",
        "\n",
        "#First, we will use the API key to access the WTO data\n",
        "\n",
        "#for year:\n",
        "  #for country:\n",
        "headers = {\n",
        "    # Request headers\n",
        "    'Ocp-Apim-Subscription-Key': '1423880037a24ebe97540ff091e6e7bc',\n",
        "}\n",
        "\n",
        "#This describes data we're grabbing from WT\n",
        "print(\"First, grab your data. We're specifying the data as all countries' Bilateral Imports (based on HS codes) of sheep from the world, in the year 1998. \")\n",
        "params = urllib.parse.urlencode({\n",
        "    # Request parameters.\n",
        "    'i': 'HS_M_0010', #Bilateral imports by detailed HS codes (2,4,6 digit) [HS_M_0010]\n",
        "    'r': 'all',\n",
        "    'p': '000', #partner = World, aka sum of all exports\n",
        "    'ps': '1998', #in the year 1998\n",
        "    'pc': '010410',\n",
        "    'spc': 'false',\n",
        "    'fmt': 'json',\n",
        "    'mode': 'full',\n",
        "    'dec': 'default',\n",
        "    'off': '0',\n",
        "    'max': '500', #maximum 500 results\n",
        "    'head': 'H',\n",
        "    'lang': '1',\n",
        "    'meta': 'false',\n",
        "})\n",
        "\n",
        "\n",
        "#now we try to request some data, the timeseries data, through the API\n",
        "try:\n",
        "    conn = http.client.HTTPSConnection('api.wto.org')\n",
        "    conn.request(\"GET\", \"/timeseries/v1/data?%s\" % params, \"\", headers)\n",
        "    response = conn.getresponse()\n",
        "    data = response.read()\n",
        "    #print(data)\n",
        "    conn.close()\n",
        "except Exception as e:\n",
        "    print(\"[Errno {0}] {1}\".format(e.errno, e.strerror))\n",
        "\n",
        "\n",
        "####################################\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from socket import AF_ALG\n",
        "df = pd.DataFrame(columns=['country', 'year', 'partnerCountry', 'item', 'quantity', 'units'])\n",
        "df\n",
        "\n"
      ],
      "metadata": {
        "id": "FCco69w0n40q",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 49
        },
        "outputId": "8045105a-e36e-4be9-a3fe-6c08f8387c01"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [country, year, partnerCountry, item, quantity, units]\n",
              "Index: []"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-475a844d-7b9e-47c0-92e1-0064c032cf9a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country</th>\n",
              "      <th>year</th>\n",
              "      <th>partnerCountry</th>\n",
              "      <th>item</th>\n",
              "      <th>quantity</th>\n",
              "      <th>units</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-475a844d-7b9e-47c0-92e1-0064c032cf9a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-4ada849b-c429-4ff1-b20f-0c9a6cb79642\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4ada849b-c429-4ff1-b20f-0c9a6cb79642')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-4ada849b-c429-4ff1-b20f-0c9a6cb79642 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-475a844d-7b9e-47c0-92e1-0064c032cf9a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-475a844d-7b9e-47c0-92e1-0064c032cf9a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        " #This calls all data from 1998 for sheep imports, for each country, and puts it into a formatted string\n",
        "import json\n",
        "str1 = data.decode('ISO-8859-1') #interpret the binary data and convert it into a Unicode string.\n",
        "str1 = \"\\r\"+str1\n",
        "#str1\n"
      ],
      "metadata": {
        "id": "h1ngR8ekuIgn"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#turns the string into a list of dictionaries, so the data is referenceable\n",
        "\n",
        "json1 = json.loads(str1)\n",
        "print(type(json1))  #checks if it turned into a dictionary"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oqYrRweT3SKM",
        "outputId": "2abc97d0-6bd9-42f8-fcd7-9107790da86e"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'dict'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Investigate the formatting of the dictionary:\n",
        "keys_list = json1.keys() #double check what the keys are in my dictionary\n",
        "print(keys_list) #now we see that the dictionary is nested\n",
        "\n",
        "#make function to reveal the formatting of the nested keys in my dictionary, so we can reference them\n",
        "def print_nested_keys(d, prefix=''):\n",
        "    for key, value in d.items():\n",
        "        if isinstance(value, dict):  # Check if the value is another dictionary\n",
        "            print_nested_keys(value, prefix + key + '.')  # Recursively call the function for nested dictionaries\n",
        "        else:\n",
        "            print(prefix + key)  # Print the key with the prefix\n",
        "\n",
        "# Assuming json1 is your nested dictionary\n",
        "print_nested_keys(json1)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VlXvVEzG4MXb",
        "outputId": "0efb45c5-73e5-42c2-de9f-66b2dfd21309"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "dict_keys(['Dataset'])\n",
            "Dataset\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#From this, we see that there is only one key, they're not nested, and that the JSON list is keyed by integer value of each entry, not by name\n",
        "\n",
        "# Accessing the list of dictionaries under 'Dataset'\n",
        "dataset = json1['Dataset']\n",
        "\n",
        "# Accessing the first dictionary in the list\n",
        "first_entry = dataset[0]\n",
        "print(first_entry)\n",
        "\n",
        "\n",
        "# ... and so on"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JZQ3KXVq44-m",
        "outputId": "64608061-072f-40c3-c5b3-5656e0d8c99d"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'IndicatorCategoryCode': 'TPM_HS', 'IndicatorCategory': 'Bilateral imports', 'IndicatorCode': 'HS_M_0010', 'Indicator': 'Bilateral imports by detailed HS codes (2,4,6 digit)', 'ReportingEconomyCode': '076', 'ReportingEconomy': 'Brazil', 'PartnerEconomyCode': '000', 'PartnerEconomy': 'World', 'ProductOrSectorClassificationCode': 'HS', 'ProductOrSectorClassification': 'Harmonized System', 'ProductOrSectorCode': '010410', 'ProductOrSector': 'Sheep', 'PeriodCode': 'A', 'Period': 'Annual', 'FrequencyCode': 'A', 'Frequency': 'Annual', 'UnitCode': 'USD', 'Unit': 'US$', 'Year': 1998, 'ValueFlagCode': None, 'ValueFlag': None, 'TextValue': None, 'Value': 3138524.0}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#define a function that allows you to find a specific metric based on the name of the country, rather than the index\n",
        "def find_country_data(country_name):\n",
        "    for data in dataset:\n",
        "        reporting_economy = data.get('ReportingEconomy')\n",
        "        if reporting_economy is not None and reporting_economy.lower() == country_name.lower().strip():\n",
        "            return data\n",
        "    return None  # Return None if the country is not found\n",
        "\n",
        "# If necessary test: Print the entire dataset to inspect its contents\n",
        "#for data in dataset:\n",
        "#  print(data)\n",
        "\n",
        "#Test: Accessing data for 'Suriname' using the find_country_data function\n",
        "brz_data = find_country_data('Brazil')\n",
        "print(brz_data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_qpfdIv55l_0",
        "outputId": "23046bd3-2f58-45fc-b42c-7cac819c4ad7"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'IndicatorCategoryCode': 'TPM_HS', 'IndicatorCategory': 'Bilateral imports', 'IndicatorCode': 'HS_M_0010', 'Indicator': 'Bilateral imports by detailed HS codes (2,4,6 digit)', 'ReportingEconomyCode': '076', 'ReportingEconomy': 'Brazil', 'PartnerEconomyCode': '000', 'PartnerEconomy': 'World', 'ProductOrSectorClassificationCode': 'HS', 'ProductOrSectorClassification': 'Harmonized System', 'ProductOrSectorCode': '010410', 'ProductOrSector': 'Sheep', 'PeriodCode': 'A', 'Period': 'Annual', 'FrequencyCode': 'A', 'Frequency': 'Annual', 'UnitCode': 'USD', 'Unit': 'US$', 'Year': 1998, 'ValueFlagCode': None, 'ValueFlag': None, 'TextValue': None, 'Value': 3138524.0}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Create ways to reference, analyze and visualize the data\n",
        "import matplotlib.pyplot as plt #chart package\n",
        "import PIL #image creating/draw package"
      ],
      "metadata": {
        "id": "cnoMVepRxbBn"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#This will create a dataframe that has each country, the specified metrics, and a color based on the ProductOrSector\n",
        "for i, country in enumerate(json1[\"Dataset\"]):\n",
        "    country1 = (country[\"ReportingEconomy\"])\n",
        "    year = (country[\"Year\"])\n",
        "    partnerCountry = (country[\"PartnerEconomy\"])\n",
        "    item = (country[\"ProductOrSector\"])\n",
        "    quantity = (country[\"Value\"])\n",
        "    units = (country[\"Unit\"])\n",
        "    quantity = int(quantity)\n",
        "    color = \"white\"\n",
        "    if item == \"Agricultural product\":\n",
        "      color = \"yellow\"\n",
        "    elif item == \"Food\":\n",
        "      color = \"red\"\n",
        "    elif item == \"Fuels and mining products\":\n",
        "      color = \"blue\"\n",
        "    elif item == \"Chemicals\":\n",
        "      color = \"purple\"\n",
        "    elif item == \"Manufactures\":\n",
        "      color = \"green\"\n",
        "    elif item == \"Textiles\":\n",
        "      color = \"grey\"\n",
        "    elif item == \"Clothing\":\n",
        "      color = \"orange\"\n",
        "    #if quantity > 0:\n",
        "    #  q1 = quantity / 10\n",
        "    #  q2 = i * 2\n",
        "    #  draw = ImageDraw.Draw(im2)\n",
        "    #  draw.ellipse((q1, i, quantity, q2), fill = color, outline ='black')\n",
        "    df = df.append({'country': country1, 'year': year, 'partnerCountry': partnerCountry, 'item': item, 'quantity': quantity,'units': units}, ignore_index=True)\n",
        "\n"
      ],
      "metadata": {
        "id": "blvaCXiVudcc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "2xISKjM_cICU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot the bar chart\n",
        "\n",
        "bar_df = pd.DataFrame({\n",
        "    'country': df['country'],\n",
        "    'quantity': df['quantity'],\n",
        "    'partnerCountry': df['partnerCountry']\n",
        "})\n",
        "\n",
        "# Drop rows where 'quantity' is equal to 0\n",
        "bar_df = bar_df[bar_df['quantity'] != 0]\n",
        "bar_df = bar_df[~bar_df['country'].str.contains('World')]\n",
        "\n",
        "\n",
        "plt.figure(figsize=(10, 10))  # Adjust the figure size as needed\n",
        "\n",
        "bars = plt.bar(bar_df['country'], bar_df['quantity'])\n",
        "\n",
        "plt.xlabel('Country')\n",
        "plt.ylabel('$USD Value of Import')\n",
        "plt.title('Sheep Imports in $USD By Country in 1998 (Excluding Non-Importing Countries)')\n",
        "\n",
        "# Rotate the country names and resize if needed for better visibility\n",
        "plt.xticks(rotation=90,fontsize=7)# Set the desired font size for x-axis tick labels\n",
        "\n",
        "# Add data labels to the bars with custom font size\n",
        "font_size_labels = 5  # Set the font size for the data labels\n",
        "for bar in bars:\n",
        "    height = bar.get_height()\n",
        "    plt.text(bar.get_x() + bar.get_width() / 2, height, str(height), ha='center', va='bottom', fontsize=font_size_labels)\n",
        "\n",
        "\n",
        "# Show the plot\n",
        "plt.tight_layout()  # To ensure all labels are displayed properly\n",
        "plt.savefig('1998_Sheep_Imports.png', dpi=600)\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "h442RXyS_KBO",
        "outputId": "0d0dc9d6-e84c-46e2-d3d7-807f39ffc866"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "3X5vgpP4uIBj"
      }
    }
  ]
}
